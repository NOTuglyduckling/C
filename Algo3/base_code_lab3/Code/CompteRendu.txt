Rapport de Travaux Pratiques : Listes Doublement Chaînées et Tri Fusion
1. Introduction

Dans le cadre de ce travail pratique, nous avons implémenté une liste doublement chaînée avec sentinelle, conformément aux spécifications fournies dans le sujet. L’objectif était de réaliser plusieurs opérateurs de manipulation de la liste, ainsi qu’un tri utilisant l’algorithme de tri fusion.
2. Implémentation des constructeurs et de l’opérateur map
2.1. list_create()

Cette fonction permet d’allouer et d’initialiser la structure représentant la liste doublement chaînée. La sentinelle est mise en place de façon à ce qu’elle se réfère à elle-même, garantissant ainsi une structure circulaire même pour une liste vide.

c

List* list_create(void) { 
    // Description de l'implémentation
}

2.2. list_delete()

Nous avons ici libéré les ressources mémoire allouées pour chaque élément de la liste, y compris la sentinelle, en respectant l’ordre de suppression pour éviter les fuites de mémoire.

c

void list_delete(ptrList* l) {
    // Code
}

2.3. list_push_back() et list_push_front()

Ces deux opérateurs permettent respectivement d’ajouter un élément à la fin et au début de la liste. Nous avons veillé à mettre à jour correctement les pointeurs des éléments précédents et suivants pour maintenir l'intégrité de la chaîne.

c

List* list_push_back(List* l, int v) {
    // Code
}

List* list_push_front(List* l, int v) {
    // Code
}

2.4. list_is_empty() et list_size()

La fonction list_is_empty() vérifie si la liste est vide en se basant sur l’attribut de taille. La fonction list_size() renvoie la taille de la liste en temps constant, en utilisant un compteur mis à jour lors de chaque insertion ou suppression.

c

bool list_is_empty(const List* l) {
    // Code
}

int list_size(const List* l) {
    // Code
}

3. Difficultés rencontrées

Les principales difficultés ont été liées à la gestion des pointeurs lors des insertions et suppressions en début et fin de liste, ainsi qu'à l'optimisation du tri fusion pour les listes doublement chaînées avec sentinelle.
4. Algorithme de tri fusion

Nous avons implémenté le tri fusion en utilisant une structure intermédiaire SubList, pour éviter les complications liées à la sentinelle dans l’algorithme classique de tri fusion. La fonction list_sort() permet de trier la liste selon une relation d’ordre définie par l'utilisateur.

c

List* list_sort(List* l, OrderFunctor f) {
    // Explication de l'algorithme de tri fusion
}

5. Conclusion

Ce TP nous a permis de renforcer notre compréhension des listes doublement chaînées et de leurs applications, ainsi que des algorithmes de tri efficaces. Nous avons également appliqué les concepts vus en cours sur la manipulation des structures de données dynamiques et la gestion de la mémoire.